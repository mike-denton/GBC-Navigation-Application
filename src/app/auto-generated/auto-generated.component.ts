import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { SelectedIndexChangedEventData } from "nativescript-drop-down";
import { Image, Label, Color, TouchGestureEventData, GestureEventData, EventData } from "tns-core-modules/";

import { registerElement } from 'nativescript-angular/element-registry';
import { CanvasView, Canvas, Paint, Path } from 'nativescript-canvas';
registerElement('CanvasView', () => CanvasView);

import { LinkItem } from '@src/link';
import { Rect } from '@src/geometry';

// coords
const points : LinkItem[] = [
  {
    id: 'parkingB',
    rect: Rect.fromPoint(193, 103, 40)
  },
  {
    id: 'parkingC',
    rect: Rect.fromPoint(88, 99, 40)
  },
  {
    id: 'parkingD',
    rect: Rect.fromPoint(114, 171, 40)
  },
  {
    id: 'parkingE',
    rect: Rect.fromPoint(220, 183, 40)
  },
  {
    id: 'parkingF',
    rect: Rect.fromPoint(220, 183, 40)
  }  
];

@Component({
  selector: 'app-auto-generated',
  templateUrl: './auto-generated.component.html',
  styleUrls: ['./auto-generated.component.css']
})

// issues: 
// -campus map / marker doesn't render (using sample images for now)
// -touch should display dropdown programmatically 
// -draw path based on marker       
export class AutoGeneratedComponent implements OnInit {

  public markerImage;
  public destImage;
  
  canvas: Canvas;
  paint: Paint;

  constructor() {}
 
  ngOnInit() {}

  // drop down
  @ViewChild('dd', { static: true }) dropdown: ElementRef;
  buildings: Array<string> = ['Building C', 'Building D', 'Building E', 'Building F'];

  // on coordinates open menu 
  onTouch(args: TouchGestureEventData) {

    let x = Math.trunc(args.getX());
    let y = Math.trunc(args.getY());
  
    // draw marker based on touch coordinates
    const point = {x, y};
    let matchedLink : LinkItem;

    for( let i = 0; i < points.length; i++){
      const li = points[i];

      // check if point is within rectangle save in linkitem
      if(Rect.isPointInsideRect(point, li.rect)){
        matchedLink = li;    
      }
    }
    
    if(matchedLink){
        console.log('load image');
        this.markerImage = "~/images/map-origin-marker.png";
    }

    console.log("Touch point: [" + x + ", " + y + "]");

    this.dropdown.nativeElement.open();
  }

  // public test(args: GestureEventData){

  //   let x = Math.trunc(args.android.getX());
  //   let y = Math.trunc(args.android.getY());

  //   this.markerImage = "https://cdn4.iconfinder.com/data/icons/iconsimple-places/512/pin_1-128.png"

  //   console.log("x: " + x + " y: " + y);
  // }

  public test(args: TouchGestureEventData){
            
    console.log('x: ',args.getX(),' | y: ',args.getY());

    this.markerImage = "~/images/map-origin-marker.png"

    this.dropdown.nativeElement.open();

  }

  public test2(args: TouchGestureEventData){
            
    console.log('x: ',args.getX(),' | y: ',args.getY());

  }

  public onchange(args: SelectedIndexChangedEventData) {
    console.log(`Drop Down selected index changed from ${args.oldIndex} to ${args.newIndex}`);

    let btnId: number = args.newIndex;

    // draw path here
    switch (btnId) {
      case 0: {
        const testLabel = new Label();
        testLabel.lineHeight = 200;
        console.log('testlabel')

        break;
      }
      case 1: {
        break;
      }
      case 2: {
        break;
      }
      case 3: {
        break;
      }
      default: {
        break;
      }
    }
  }

  // public draw(canvas: Canvas) {
  //   const paint = new Paint();
  //   paint.setColor(new Color('black'));  
  //   paint.strokeWidth = 10;
  //   canvas.drawPath();
  //   console.log('drawn');
  // }

}
